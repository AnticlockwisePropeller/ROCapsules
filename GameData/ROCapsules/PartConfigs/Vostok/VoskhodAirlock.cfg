PART
{
	module = Part
	name = ROC-VoskhodAirlock
	author = RaiderNick, Pap
	
	RSSROConfig = true
	RP0conf = true
	
	//  ============================================================================
	//	Model and Dimensions
	//  ============================================================================
	
	MODEL
	{
		model = ROCapsules/Assets/RN/voskhod_airlock
		scale = 1.0, 1.0, 1.0
	}
	
	scale = 1.0
	rescaleFactor = 1.0
	
	node_stack_bottom = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1
	// stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,1,0
	
	bulkheadProfiles = size1
	
	fx_gasBurst_white = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, decouple
	sound_decoupler_fire = decouple
		
	//  ============================================================================
	//	Title, Description, Category, Techs
	//  ============================================================================
	
	title = Voskhod Airlock
	manufacturer = OKB-1
	description = The Voskhod Airlock will allow for your crew to perform an EVA from the Voskhod airlock. Attach this to the node on the side of the Voskhod capsule. Transfer your crew memeber inside and perform your EVA. Be sure to decouple this before re-entry.
	
	mass = 0.339
	
	category = Utility
	subcategory = 0
	
	tags = soviet, capsule, crew, voskhod, airlock, eva
	
	TechRequired = unlockParts
	cost = 150
	entryCost = 1
	
	stagingIcon = DECOUPLER_HOR
	CrewCapacity = 1
	
	//  ============================================================================
	//	Thermo, Durability
	//  ============================================================================
		
	crashTolerance = 1
	maxTemp = 773.15
	skinMaxTemp = 873.15
	
	//  ============================================================================
	//	Modules and Resources
	//  ============================================================================
		
	MODULE
	{
		name = ModuleConnectedLivingSpace
		passable = true
	}
	
	MODULE
	{
		name = ModuleDecouple
		ejectionForce = 0
		explosiveNodeID = bottom
	}
	
	INTERNAL
	{
		name = GenericSpace3
	}
	
	MODULE
	{
		name = ModuleEngines
		thrustVectorTransformName = thrustTransform
		throttleLocked = True
		exhaustDamage = True
		ignitionThreshold = 0.1
		minThrust = 0
		maxThrust = 0.5
		heatProduction = 200
		useEngineResponseTime = True
		engineAccelerationSpeed = 2.0
		allowShutdown = False
		fxOffset = 0, 0, 0
		staging = false
		PROPELLANT
		{
			name = PSPC
			ratio = 1.0
			DrawGauge = True
		}
		atmosphereCurve
		{
			key = 0 120
			key = 1 90
		}
		ActivatesEvenIfDisconnected = true	
	}
	
	RESOURCE
	{
		name = PSPC
		amount = 0.431
		maxAmount = 0.431
	}
	
	//  ============================================================================
	//	Comms
	//  ============================================================================
	
	
	//  ============================================================================
	//	Animations and Textures
	//  ============================================================================
	
	MODULE
	{
		name = BDFSanimateGeneric
		animationName = Deploy
		startEventGUIName = Inflate Airlock
		endEventGUIName = Deflate Airlock
		toggleActionName = Toggle Airlock
		startDeployed = False
		// Animation Layer. If you have more than one animation on a part, this must be unique for each one in order for them to not interrupt each other. If the stock engine heat animation module is used, thatâ€™s probably on layer 0, so make this 1 or higher.
		layer = 1
		playAnimationOnEditorSpawn = False
		useActionEditorPopup = True
		// If you have more than one BDFSanimateGeneric on a part, give each a unique ID to. This makes the popup menu appear in a separate location for each module, and not steal each others windows. values: 0-9.
		moduleID = 0
	}
	
	MODULE:NEEDS[!TexturesUnlimited]
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 16

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		NearClipPlane = .1

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Diffuse
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.50
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = airlock_base,ribs,bar1,bar2

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 130

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
		rimFalloff = 5.0
		rimColor = 0.8242, 0.6445, 0.1914, 1.0
		ReflectionColor = 0.6242, 0.6445, 0.69, 1.0
    }
}
