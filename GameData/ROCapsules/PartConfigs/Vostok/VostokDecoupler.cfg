PART
{
	module = Part
	name = ROC-VostokDecoupler
	author = RaiderNick, Pap
	
	RSSROConfig = true
	RP0conf = true
	
	//  ============================================================================
	//	Model and Dimensions
	//  ============================================================================
	
	MODEL
	{
		model = ROCapsules/Assets/RN/vostok_dec
		scale = 1.0, 1.0, 1.0
	}
	
	scale = 1.0
	rescaleFactor = 1.0
	node_stack_top    = 0.0, 0.77255, 0.0, 0.0, 1.0, 0.0, 1
	node_stack_bottom = 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 2
	// stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,1,0
	
	bulkheadProfiles = size2, size1
	
	fx_gasBurst_white = 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, decouple
    sound_decoupler_fire = decouple
		
	//  ============================================================================
	//	Title, Description, Category, Techs
	//  ============================================================================
	
	title = Vostok/Voskhod Decoupler
	manufacturer = OKB-1
	description = Place this between the Descent Module and the Service Module to decouple the Capsule for reentry.
	
	mass = 0.0254
	
	category = Coupling
	subcategory = 0
	
	tags = vostok, gagarin, soviet, decoupler, decouple, voskhod
	
	TechRequired = unlockParts
	cost = 150
	entryCost = 1
	
	stageOffset = 1
    childStageOffset = 1
	
	//  ============================================================================
	//	Thermo, Durability
	//  ============================================================================
		
	crashTolerance = 8
	maxTemp = 673.15
	skinMaxTemp = 773.15
	emissiveConstant = 0.4 // not too absorptive for reentry
	thermalMassModifier = 2.0
	
	//  ============================================================================
	//	Modules and Resources
	//  ============================================================================
	
	MODULE:NEEDS[!BDAnimationModules]
    {
        name = ModuleDecouple
        explosiveNodeID = top
        ejectionForce = 25
    }
	
	//  ============================================================================
	//	Animations and Textures
	//  ============================================================================
	
	MODULE:NEEDS[BDAnimationModules]
	{
	    name = BDAnimatedDec
	    ejectionForce = 40
	    explosiveNodeID = top
	    staged = true
	    animationName = Deploy
		waitForAnimation = false // (If true, then delay decoupling until animation has finished playing)
		layer = 1 // Animation's layer will be set to this. Helps prevent multiple animations on one part interfering with each other
	}
	
	MODULE:NEEDS[!BDAnimationModules]
	{
		name = BDFSanimateGeneric
		animationName = Deploy
		startEventGUIName = Disconnect Wires
		endEventGUIName = Reconnect Wires
		toggleActionName = Toggle Wires
		startDeployed = False
		// Animation Layer. If you have more than one animation on a part, this must be unique for each one in order for them to not interrupt each other. If the stock engine heat animation module is used, thatâ€™s probably on layer 0, so make this 1 or higher.
		layer = 1
		playAnimationOnEditorSpawn = False
		useActionEditorPopup = True
		// If you have more than one BDFSanimateGeneric on a part, give each a unique ID to. This makes the popup menu appear in a separate location for each module, and not steal each others windows. values: 0-9.
		moduleID = 0
	}
	
	MODULE:NEEDS[!TexturesUnlimited]
    {
        name = ReflectiveShaderModule

        // Lower values for performance, higher values for aesthetics (you shouldn't ever need to go higher than 1024).
        CubeMapSize = 16

        // How deep the reflection will be ("how far the reflection camera will view")
        FarClipPlane = 500000000
		// How far away must something be before it is reflected
		NearClipPlane = .1

        // Set to false to render all 6 faces of the CubeMap at once (six times slower~)
        OneFacePerFrame = true

        // The shader to find. The reflective shaders are:
        // Reflective/Diffuse
        // Reflective/VertexLit
        // Reflective/Bumped Diffuse
		//Reflective/Bumped Specular
        ShaderName = Reflective/Bumped Diffuse
		realTimeReflection = False
		

        // The height of the parallax map. Values are accepted between 0.005 and 0.08.
        ParallaxHeight = 0.01

        // How reflective the reflection will be (Weakest 0.0 - 1.0 Strongest).
        ReflectionStrength = 0.50
		//ReflectionColor = 0, 0, 0, 0

        // Use this variable to specify which meshes to apply the shader to.
        // Not using this variable will default to the first found mesh.
        // Use the actual mesh name for the value. Or you could use:
        // all - to replace the shader on all meshes in the model.
        MeshesToChange = TDU_TopAntenna,TDU_MConnector

        // How shiny the specularity will be (if specular).
        // This value will be automatically set if it already exists on the previous shader and is not defined here.
        Shininess = 1.0
		updateRate = 130

        // These variables should be used together only.
        // These values will be automatically set if they already exist on the previous shader and are not defined here
        SpecColorR = 0.8
        SpecColorG = 0.8
        SpecColorB = 0.8
        SpecColorA = 0.8
		rimFalloff = 5.0
		rimColor = 0.8242, 0.6445, 0.1914, 1.0
		ReflectionColor = 0.6242, 0.6445, 0.69, 1.0
    }
	
}
